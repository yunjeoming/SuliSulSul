<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sul.server.mapper.AlcMapper">

	<select id="selectTotalAlcList" parameterType="java.util.Map" resultType="com.sul.server.vo.AlcVo">
	    SELECT CEIL(COUNT(A.ALC_NO) OVER() / 10) TOT_PAGE, A.ALC_NO, A.ALC_NM, A.CATE_NO
	         , D.CATE_NM, A.FILE_NO, A.EXP_YN, C.FILE_NM, C.FILE_EXT, B.AVG_GRADE, REVIEW_CNT
	      FROM INFORMATION A
	      LEFT JOIN GRADE B
	        ON A.ALC_NO = B.ALC_NO
	      LEFT JOIN ALC_FILE C
	        ON A.FILE_NO = C.FILE_NO
	      LEFT JOIN  
	           (
	            SELECT COUNT(*) REVIEW_CNT, ALC_NO
	              FROM REVIEW
	             GROUP BY ALC_NO
	           ) C
	        ON A.ALC_NO = C.ALC_NO 
	         , CATEGORY D
	     WHERE A.CATE_NO = D.CATE_NO
	      <if test="expYn == 'true'" >
	            AND A.EXP_YN = 'true'
	      </if>
	      <if test="expYn == null or expYn == '' or expYn == 'false'" >
	            AND A.EXP_YN = 'false'
	      </if>
	      <if test="alcNm != null and alcNm != ''" >
	            AND ALC_NM LIKE CONCAT('%', #{alcNm}, '%')
	      </if>
	      <if test="cateNo != 0" >
	            AND A.CATE_NO = #{cateNo}
	      </if>
	     ORDER BY ALC_NO
	     LIMIT #{startPage}, 10
	</select>
	
	<select id="selectAlcDetail" parameterType="java.util.Map" resultType="com.sul.server.vo.AlcVo">
	    SELECT A.ALC_NO, A.ALC_NM, A.VOL, A.PRODUCTOR, A.DETAIL, A.EXP_YN, D.CATE_NO, D.CATE_NM, MIN(C.FILE_NM) FILE_NM, MIN(C.FILE_EXT) FILE_EXT, B.AVG_GRADE
	         , IFNULL(MIN(GRADE_5), 0) GRADE_5, IFNULL(MIN(GRADE_45), 0) GRADE_45, IFNULL(MIN(GRADE_4), 0) GRADE_4, IFNULL(MIN(GRADE_35), 0) GRADE_35, IFNULL(MIN(GRADE_3), 0) GRADE_3
	         , IFNULL(MIN(GRADE_25), 0) GRADE_25, IFNULL(MIN(GRADE_2), 0) GRADE_2, IFNULL(MIN(GRADE_15), 0) GRADE_15, IFNULL(MIN(GRADE_1), 0) GRADE_1
	      FROM INFORMATION A
	      LEFT JOIN GRADE B
	        ON A.ALC_NO = B.ALC_NO
	      LEFT JOIN ALC_FILE C
	        ON A.FILE_NO = C.FILE_NO
	      LEFT JOIN 
	           (
	            SELECT ALC_NO
	                 , CASE WHEN GRADE = 5 THEN COUNT(1) END GRADE_5
	                 , CASE WHEN GRADE = 4.5 THEN COUNT(1) END GRADE_45
	                 , CASE WHEN GRADE = 4 THEN COUNT(1) END GRADE_4
	                 , CASE WHEN GRADE = 3.5 THEN COUNT(1) END GRADE_35
	                 , CASE WHEN GRADE = 3 THEN COUNT(1) END GRADE_3
	                 , CASE WHEN GRADE = 2.5 THEN COUNT(1) END GRADE_25
	                 , CASE WHEN GRADE = 2 THEN COUNT(1) END GRADE_2
	                 , CASE WHEN GRADE = 1.5 THEN COUNT(1) END GRADE_15
	                 , CASE WHEN GRADE = 1 THEN COUNT(1) END GRADE_1
	              FROM REVIEW
	             WHERE ALC_NO = #{alcNo}
	             GROUP BY ALC_NO, GRADE
	           ) E
	        ON A.ALC_NO = E.ALC_NO
	         , CATEGORY D
	     WHERE A.CATE_NO = D.CATE_NO
	       AND A.ALC_NO = #{alcNo}
	     GROUP BY A.ALC_NO, A.ALC_NM, A.VOL, A.PRODUCTOR, A.DETAIL, A.EXP_YN, D.CATE_NO, D.CATE_NM, B.AVG_GRADE
	</select>
	
	<select id="selectCateList" resultType="com.sul.server.vo.CategoryVo">
	    SELECT CATE_NO, CATE_NM
	      FROM CATEGORY
	</select>
	
	<select id="selectFileInfo" resultType="com.sul.server.vo.AlcVo">
	    /* selectFileInfo - 파일 조회 */
	    SELECT B.ALC_NO, A.FILE_NO, A.FILE_PATH, A.FILE_NM, A.FILE_EXT
	      FROM ALC_FILE A
	         , INFORMATION B
	     WHERE A.FILE_NO = B.FILE_NO
	       AND B.ALC_NO = #{alcNo}
	</select>
	
	<select id="selectMainAlcList" resultType="com.sul.server.vo.AlcVo" parameterType="String">
	    /* selectMainAlcList - 메인 표출 술 목록 조회 */
	    SELECT A.ALC_NO, A.ALC_NM, A.CATE_NO, D.CATE_NM, A.FILE_NO, A.EXP_YN, B.AVG_GRADE, REVIEW_CNT
	         , CASE WHEN #{flag} = 'G' THEN ROW_NUMBER() OVER(ORDER BY B.AVG_GRADE DESC) 
	                WHEN #{flag} = 'R' THEN ROW_NUMBER() OVER(ORDER BY C.REVIEW_CNT DESC)
	            END RNK
	      FROM INFORMATION A
	      LEFT JOIN GRADE B
	        ON A.ALC_NO = B.ALC_NO
	      LEFT JOIN  
	           (
	            SELECT COUNT(*) REVIEW_CNT, ALC_NO
	              FROM REVIEW
	             GROUP BY ALC_NO
	           ) C
	        ON A.ALC_NO = C.ALC_NO 
	         , CATEGORY D 
	     WHERE A.CATE_NO = D.CATE_NO
	     ORDER BY RNK
	     LIMIT 5
	</select>
	
	<insert id="insertAlcInfo" parameterType="java.util.Map">
	    INSERT INTO 
	           INFORMATION(ALC_NM, CATE_NO, VOL, PRODUCTOR, DETAIL, FILE_NO, EXP_YN)
	    VALUES (#{alcNm}, #{cateNo}, #{vol}, #{productor}, #{detail}, #{fileNo}, #{expYn})
	</insert>
	
	<insert id="insertFileInfo" parameterType="com.sul.server.vo.AlcVo" useGeneratedKeys="true" keyProperty="fileNo" keyColumn="FILE_NO">
	    /* insertFileInfo - 파일 등록 */
	    INSERT INTO
	           ALC_FILE(FILE_NO, FILE_PATH, FILE_NM, FILE_EXT)
	    VALUES (#{fileNo}, #{filePath}, #{fileNm}, #{fileExt})
	</insert>
	
	<update id="updateAlcInfo" parameterType="java.util.Map">
	    UPDATE INFORMATION
	       SET ALC_NM = #{alcNm}
	         , CATE_NO = #{cateNo}
	         , VOL = #{vol}
	         , PRODUCTOR = #{productor}
	         , DETAIL = #{detail}
	         , FILE_NO = #{fileNo}
	         , EXP_YN = #{expYn}
	     WHERE ALC_NO = #{alcNo}
	</update>
	
	<update id="updateAlcExp" parameterType="java.util.Map">
	    UPDATE INFORMATION
	       SET EXP_YN = #{expYn}
	     WHERE ALC_NO = #{alcNo}
	</update>
	
	<update id="updateAlcFileInfo" parameterType="java.util.Map">
	    /* updateAlcFileInfo - 파일 등록 - 술에 파일 정보 업데이트 */
	    UPDATE INFORMATION
	       SET FILE_NO = #{fileNo}
	     WHERE ALC_NO = #{alcNo}
	</update>
	
	<delete id="deleteAlcInfo" parameterType="java.util.Map">
	    DELETE FROM INFORMATION
	     WHERE ALC_NO = #{alcNo}
	</delete>
	
	<delete id="deleteFileInfo" parameterType="java.util.Map">
	    DELETE FROM ALC_FILE
	     WHERE FILE_NO = (SELECT FILE_NO FROM INFORMATION WHERE ALC_NO = #{alcNo})
	</delete>

</mapper>